 - TODO or not TODO: InstantiationType.SPRING_COMPONENT ?
        Ça hardcode une dépendance avec Spring.
        Ce serait sans doute mieux dans un module à part (qui s'occuperait aussi de générer SpringMapperContext.java).
        corrolaire : l'utilisation d'une enum pour indiquer la manière d'instancier le mapper n'est pas extensible
                     (ie. ajout d'un support Guice, JEE, ...) utiliser plutôt une interface ?
        meilleure idée
           => supprimer le paramètre de @Mapper
           => déduire le cas enum si c'est une enum qui est annotée
               le nom de la valeur de l'enum n'a pas d'importance, on valide juste à la compilation qu'il n'y en a qu'une
           => déduire le cas constructeur que c'est une enum qui est annotée
           => une API permet d'ajouter une annotation en plus de @Mapper qui fera que l'on créera une classe avec un @Component
              et une autre implémentation de factory
 - TODO : déplacer l'annotation processor et son implémentation dans son propore module => séparation en 2 artifacts
          des annotations et du processor, sera sûrement pratique pour test U par exemple$
          (surtout quand Processor sera en auto discovery)
 - TODO : ajouter un paramètre à @Mapper pour préciser la visibilité de la classe Mapper générée (public par défaut, sinon protected)
           -> on n'ajoute pas de paramètre, la visibilité de l'interface générée sera la même que celle de la classe annotée avec @Mapper
 - framework d'injection super léger : essayer Dagger


ROADMAP
 - intégration avec Spring, générer des classes annotées @Component pour les classes @Mapper elles-mêmes annotées avec @Mapper
 - écriture d'un cas d'intégration avec un Spring contexte
 - auto discovery de l'annotation processor
 - séparation en modules spécifiques des annotations et du processor
 - implémentation du traitement des classes annotées @MapperFactory
 - refacto de la génération de code source, écriture d'un writer maison pour clarifier la génération de code
 - rendre optionel la dépendance à Spring
 - ajouter une annotation pour définir ou surcharger le comportement par défaut qui ajoute des @Component