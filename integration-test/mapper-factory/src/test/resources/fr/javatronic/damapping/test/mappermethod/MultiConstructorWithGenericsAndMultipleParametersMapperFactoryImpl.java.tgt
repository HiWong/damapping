package fr.javatronic.damapping.test.mappermethod;

import com.google.common.base.Optional;
import fr.javatronic.damapping.test.mappermethod.sub.B;
import fr.javatronic.damapping.test.mappermethod.sub.C;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;

@javax.annotation.Generated("fr.javatronic.damapping.processor.DAAnnotationProcessor")
public class MultiConstructorWithGenericsAndMultipleParametersMapperFactoryImpl implements MultiConstructorWithGenericsAndMultipleParametersMapperFactory {

    @Override
    @Nonnull
    public MultiConstructorWithGenericsAndMultipleParametersMapper get(Set<A> as) {
        return new MultiConstructorWithGenericsAndMultipleParametersMapperImpl(new MultiConstructorWithGenericsAndMultipleParameters(as));
    }

    @Override
    @Nonnull
    public MultiConstructorWithGenericsAndMultipleParametersMapper get(List<B> bs) {
        return new MultiConstructorWithGenericsAndMultipleParametersMapperImpl(new MultiConstructorWithGenericsAndMultipleParameters(bs));
    }

    private static class MultiConstructorWithGenericsAndMultipleParametersMapperImpl implements MultiConstructorWithGenericsAndMultipleParametersMapper {
        private final MultiConstructorWithGenericsAndMultipleParameters instance;

        public MultiConstructorWithGenericsAndMultipleParametersMapperImpl(MultiConstructorWithGenericsAndMultipleParameters instance) {
            this.instance = instance;
        }

        @Override
        @Nullable
        public Optional<String> apply(@Nullable Map<C, Set<BigDecimal>> input, Object[] objs) {
            return instance.apply(input, objs);
        }
    }
}
