package fr.phan.damapping.test;

import com.google.common.base.Optional;
import fr.phan.damapping.test.sub.B;
import fr.phan.damapping.test.sub.C;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.Set;

// GENERATED CODE, DO NOT MODIFY, THIS WILL BE OVERRIDE
public class MultiConstructorWithGenericsMapperFactoryImpl implements MultiConstructorWithGenericsMapperFactory {

    @Override
    public MultiConstructorWithGenericsMapper instanceByConstructor(Set<A> as) {
        return new MultiConstructorWithGenericsMapperImpl(new MultiConstructorWithGenerics(as));
    }

    @Override
    public MultiConstructorWithGenericsMapper instanceByConstructor(List<B> bs) {
        return new MultiConstructorWithGenericsMapperImpl(new MultiConstructorWithGenerics(bs));
    }

    private static class MultiConstructorWithGenericsMapperImpl implements MultiConstructorWithGenericsMapper {

        private final MultiConstructorWithGenerics instance;

        public MultiConstructorWithGenericsMapperImpl(MultiConstructorWithGenerics instance) {
            this.instance = instance;
        }

        @Override
        public Optional<String> apply(Map<C, Set<BigDecimal>> input) {
            return instance.apply(input);
        }

    }
}
